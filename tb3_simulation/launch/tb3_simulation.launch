<launch>
  <arg name="model"           default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="initial_pose_x"  default="0.0" doc="initial x position of the robot"/>
  <arg name="initial_pose_y"  default="0.0" doc="initial y position of the robot"/>
  <arg name="initial_pose_a"  default="0.0" doc="initial angle of the robot"/>
  <arg name="joint_noise_std" default="0.0" doc="standard deviation of wheel noise per second"/>
  <arg name="sim_namespace" default="ground_truth" doc="namespace for `real` simulated robot" />

  <!-- Update joint names with workspace name -->
  <param name="tb3_model" value="$(arg model)"/>
  <param name="wheel_left_joint_name" value="/$(arg sim_namespace)/wheel_left_joint"/>
  <param name="wheel_right_joint_name" value="/$(arg sim_namespace)/wheel_right_joint"/>
  <param name="joint_states_frame" value="/$(arg sim_namespace)/base_footprint"/>
  <param name="odom_frame" value="/$(arg sim_namespace)/odom"/>
  <param name="base_frame" value="/$(arg sim_namespace)/base_footprint"/>
  
  <!-- Robot file -->
  <arg name="urdf_file" default="$(find xacro)/xacro '$(find tb3_simulation)/urdf/turtlebot3_$(arg model).urdf.xacro' ns:='/$(arg sim_namespace)/'" />
  <param name="robot_description" command="$(arg urdf_file)" />

  <!-- Odometry -->
  <node pkg="turtlebot3_fake" type="turtlebot3_fake_node" name="turtlebot3_fake_node" output="screen">
    <remap from="cmd_vel" to="/cmd_vel"/>
  </node>

  <!-- Transformation on the robot -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
    <param name="publish_frequency" type="double" value="50.0" />
    <param name="tf_prefix" value="$(arg sim_namespace)"/>
  </node>
  
  <!-- Localization -->
  <node pkg="tf" type="static_transform_publisher" name="map_odom_tf" 
        args="$(arg initial_pose_x) $(arg initial_pose_y) 0 $(arg initial_pose_a) 0 0 /map /$(arg sim_namespace)/odom 100" />

  <!-- Laser scanner -->
  <node pkg="tb3_simulation" name="laser_simulator" type="laser_simulator"
        output="screen">
    <remap from="~map" to="/map"/>
    <remap from="~odom" to="odom"/>
    <remap from="~scan" to="scan"/>
    <rosparam file="$(find tb3_simulation)/config/models.yaml"/>
    <rosparam file="$(find tb3_simulation)/models/LDS_01.yaml"/>
    <param name="frame_id" value="$(arg sim_namespace)/base_scan"/>
    <param name="offset/x" value="0"/>
    <param name="offset/y" value="0"/>
    <param name="offset/z" value="0.0"/>
  </node>

  <!-- Republish sensor messages to base workspace -->
  <node pkg="tb3_simulation" name="sim_repub" type="sim_repub.py" output="screen">
    <remap from="~scan_out" to="/scan"/>
    <remap from="~joint_states_out" to="/joint_states"/>
    <param name="noise_std" value="$(eval radians(joint_noise_std))"/>
    <param name="namespace_remove" value="$(arg sim_namespace)" />
  </node>

</launch>